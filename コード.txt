Sub フィルター表示行を複数シートからコピー()

    Dim ws As Worksheet
    Dim newWs As Worksheet
    Dim visRange As Range
    Dim lastRow As Long
    Dim lastCol As Long
    Dim sName As String

    For Each ws In ActiveWindow.SelectedSheets
        ' 最終行・最終列を取得
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column

        On Error Resume Next
        Set visRange = ws.Range(ws.Cells(1, 1), ws.Cells(lastRow, lastCol)).SpecialCells(xlCellTypeVisible)
        If Err.Number <> 0 Then
            MsgBox "シート '" & ws.Name & "' に表示行がありません。スキップします。"
            Err.Clear
            On Error GoTo 0
            GoTo SkipNext
        End If
        On Error GoTo 0

        ' 新しいシートを元のすぐ後ろに追加
        Set newWs = ThisWorkbook.Sheets.Add(After:=ws)
        sName = ws.Name & "(2)"

        ' 同名シートがすでにある場合は末尾に(3), (4)と追加
        Dim n As Integer: n = 2
        Do While SheetExists(sName)
            n = n + 1
            sName = ws.Name & "(" & n & ")"
        Loop
        newWs.Name = sName

        ' 表示行をコピーして貼り付け
        visRange.Copy Destination:=newWs.Range("A1")

SkipNext:
        Set visRange = Nothing
        Set newWs = Nothing
    Next ws

    MsgBox "コピー完了しました。"

End Sub

Function SheetExists(name As String) As Boolean
    Dim ws As Worksheet
    SheetExists = False
    For Each ws In ThisWorkbook.Sheets
        If ws.Name = name Then
            SheetExists = True
            Exit Function
        End If
    Next
End Function

Sub 複数シートA列の文言を空白で分割()

    Dim ws As Worksheet
    Dim cell As Range
    Dim i As Long
    Dim parts As Variant
    Dim val As String

    For Each ws In ActiveWindow.SelectedSheets
        With ws
            For Each cell In .Range("A2:A" & .Cells(.Rows.Count, 1).End(xlUp).Row).SpecialCells(xlCellTypeVisible)
                val = Trim(cell.Value)
                If val <> "" Then
                    ' 複数空白を1つに正規化
                    Do While InStr(val, "  ") > 0
                        val = Replace(val, "  ", " ")
                    Loop
                    ' 分割して右隣に展開
                    parts = Split(val, " ")
                    For i = 0 To UBound(parts)
                        cell.Offset(0, i + 1).Value = parts(i)
                    Next i
                End If
            Next cell
        End With
    Next ws

    MsgBox "分割完了しました。"

End Sub


Sub フィルター表示行を1つの新ブックに集約コピー()

    Dim ws As Worksheet
    Dim visRange As Range
    Dim lastRow As Long, lastCol As Long
    Dim sName As String
    Dim newWb As Workbook
    Dim newWs As Worksheet

    ' 新しいブックを1つだけ作成
    Set newWb = Workbooks.Add(xlWBATWorksheet)
    Application.DisplayAlerts = False
    Do While newWb.Sheets.Count > 0
        newWb.Sheets(1).Delete
    Loop
    Application.DisplayAlerts = True

    For Each ws In ActiveWindow.SelectedSheets
        ' 最終行・列の取得
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
        lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column

        ' 表示行だけ取得
        On Error Resume Next
        Set visRange = ws.Range(ws.Cells(1, 1), ws.Cells(lastRow, lastCol)).SpecialCells(xlCellTypeVisible)
        If Err.Number <> 0 Or visRange Is Nothing Then
            Err.Clear
            On Error GoTo 0
            GoTo SkipNext
        End If
        On Error GoTo 0

        ' 新ブックにシートを追加
        Set newWs = newWb.Sheets.Add(After:=newWb.Sheets(newWb.Sheets.Count))
        sName = ws.Name

        ' 同名チェック
        Dim n As Integer: n = 1
        Do While SheetExistsInBook(newWb, sName)
            n = n + 1
            sName = ws.Name & " (" & n & ")"
        Loop
        newWs.Name = sName

        ' コピー
        visRange.Copy Destination:=newWs.Range("A1")

SkipNext:
        Set visRange = Nothing
        Set newWs = Nothing
    Next ws

    MsgBox "新しいブックにコピーが完了しました。"

End Sub

Function SheetExistsInBook(wb As Workbook, name As String) As Boolean
    Dim s As Worksheet
    SheetExistsInBook = False
    For Each s In wb.Sheets
        If s.Name = name Then
            SheetExistsInBook = True
            Exit Function
        End If
    Next
End Function

Sub すべてのシートの1行目が空なら削除()

    Dim ws As Worksheet
    Dim lastCol As Long
    Dim isEmpty As Boolean
    Dim col As Long

    For Each ws In ThisWorkbook.Sheets
        With ws
            lastCol = .Cells(1, .Columns.Count).End(xlToLeft).Column
            isEmpty = True

            For col = 1 To lastCol
                If Trim(.Cells(1, col).Value) <> "" Then
                    isEmpty = False
                    Exit For
                End If
            Next col

            If isEmpty Then .Rows(1).Delete
        End With
    Next ws

    MsgBox "空の1行目を削除しました（ある場合のみ）"

End Sub

Sub ファイル数バイト数ヘッダー追加と列削除()

    Dim ws As Worksheet

    For Each ws In ActiveWorkbook.Sheets
        With ws
            ' 1行目を追加
            .Rows(1).Insert Shift:=xlDown

            ' A1とC1にラベルを追加
            .Range("A1").Value = "ファイル数"
            .Range("C1").Value = "バイト数"

            ' D列 → 先に削除（列番号が変わるため）
            .Columns("D").Delete
            .Columns("B").Delete
        End With
    Next ws

    MsgBox "全シートにヘッダーを追加し、B列とD列を削除しました。"

End Sub

Sub A列に拡張子フィルター（OR条件手動適用）

    Dim ws As Worksheet
    Dim rng As Range, cell As Range
    Dim lastRow As Long

    Set ws = ActiveSheet
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row

    ' 一旦すべて表示（フィルター解除）
    If ws.AutoFilterMode Then ws.AutoFilterMode = False

    ' A列のデータ範囲
    Set rng = ws.Range("A2:A" & lastRow)

    ' すべての行を表示
    ws.Rows.Hidden = False

    ' 条件に合わない行を非表示（.txt/.xml/.html のいずれも含まない）
    For Each cell In rng
        If cell.EntireRow.Hidden = False Then
            If InStr(cell.Value, ".txt") = 0 And _
               InStr(cell.Value, ".xml") = 0 And _
               InStr(cell.Value, ".html") = 0 Then
                cell.EntireRow.Hidden = True
            End If
        End If
    Next cell

    MsgBox "拡張子フィルター適用（.txt / .xml / .html）"

End Sub

Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As LongPtr) As Long
Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
Private Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long

Sub ClearClipboard()
    If OpenClipboard(0&) Then
        EmptyClipboard
        CloseClipboard
    End If
End Sub
